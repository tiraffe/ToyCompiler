函数定义
for循环 for for ( <赋值函数> <表达式> ; <后缀表达式> ) { <函数块> }
while循环 while while ( <表达式> ) { <函数块> }
变量 id <标志符> <数组下标>
变量闭包 ; $
变量闭包 , , <变量> <赋初值> <变量闭包>
标志符 id id
表达式 id <因子> <项>
表达式 ! ! <因子> <项>
表达式 ( <因子> <项>
表达式 number <因子> <项>
表达式 string <因子> <项>
参数 id <标志符>
参数 number <数字>
参数 string <字符串>
参数闭包 , , <参数> <参数闭包>
参数闭包 ) $
参数列表 id <参数> <参数闭包>
参数列表 number <参数> <参数闭包>
参数列表 string <参数> <参数闭包>
参数声明 ) $
参数声明 type <声明> <声明闭包>
读语句 read read ( <因式> ) ;
多个数据 number <数字> <数字闭包>
否则语句 for $
否则语句 while $
否则语句 id $
否则语句 read $
否则语句 if $
否则语句 return $
否则语句 write $
否则语句 } $
否则语句 else else { <函数块> }
赋初值 ; $
赋初值 , $
赋初值 ) $
赋初值 = = <右值>
赋值函数 id <变量> <赋值或函数调用>
赋值或函数调用 ( ( <参数列表> ) ;
赋值或函数调用 = = <右值> ;
函数定义 type <类型> <变量> ( <参数声明> ) { <函数块> }
函数返回 return return <因式> ;
函数块 for <声明语句闭包> <函数块闭包>
函数块 while <声明语句闭包> <函数块闭包>
函数块 id <声明语句闭包> <函数块闭包>
函数块 type <声明语句闭包> <函数块闭包>
函数块 read <声明语句闭包> <函数块闭包>
函数块 if <声明语句闭包> <函数块闭包>
函数块 return <声明语句闭包> <函数块闭包>
函数块 write <声明语句闭包> <函数块闭包>
函数块 } <声明语句闭包> <函数块闭包>
函数块闭包 for <for循环> <函数块闭包>
函数块闭包 while <while循环> <函数块闭包>
函数块闭包 id <赋值函数> <函数块闭包>
函数块闭包 read <读语句> <函数块闭包>
函数块闭包 if <条件语句> <函数块闭包>
函数块闭包 return <函数返回> <函数块闭包>
函数块闭包 write <写语句> <函数块闭包>
函数块闭包 } $
后缀表达式 id <变量> <后缀运算符>
后缀运算符 ++ ++
后缀运算符 -- --
类型 type type
逻辑运算符 != !=
逻辑运算符 && &&
逻辑运算符 < <
逻辑运算符 <= <=
逻辑运算符 == ==
逻辑运算符 > >
逻辑运算符 >= >=
逻辑运算符 || ||
声明 type <类型> <变量> <赋初值>
声明闭包 , , <声明> <声明闭包>
声明闭包 ) $
声明语句 type <声明> <变量闭包> ;
声明语句闭包 for $
声明语句闭包 while $
声明语句闭包 id $
声明语句闭包 type <声明语句> <声明语句闭包>
声明语句闭包 read $
声明语句闭包 if $
声明语句闭包 return $
声明语句闭包 write $
声明语句闭包 } $
数字 number number
数字闭包 , , <数字> <数字闭包>
数字闭包 } $
数组下标 ; $
数组下标 , $
数组下标 ( $
数组下标 ) $
数组下标 = $
数组下标 ++ $
数组下标 -- $
数组下标 != $
数组下标 && $
数组下标 < $
数组下标 <= $
数组下标 == $
数组下标 > $
数组下标 >= $
数组下标 || $
数组下标 % $
数组下标 * $
数组下标 + $
数组下标 - $
数组下标 / $
数组下标 ] $
数组下标 [ [ <因式> ]
条件语句 if if ( <表达式> ) { <函数块> } <否则语句>
项 ; $
项 , $
项 ) $
项 != <逻辑运算符> <因子> <项>
项 && <逻辑运算符> <因子> <项>
项 < <逻辑运算符> <因子> <项>
项 <= <逻辑运算符> <因子> <项>
项 == <逻辑运算符> <因子> <项>
项 > <逻辑运算符> <因子> <项>
项 >= <逻辑运算符> <因子> <项>
项 || <逻辑运算符> <因子> <项>
项 + + <因子> <项>
项 - - <因子> <项>
写语句 write write ( <因式> ) ;
因式 id <变量>
因式 ( ( <表达式> )
因式 number <数字>
因式 string <字符串>
因式递归 ; $
因式递归 , $
因式递归 ) $
因式递归 != $
因式递归 && $
因式递归 < $
因式递归 <= $
因式递归 == $
因式递归 > $
因式递归 >= $
因式递归 || $
因式递归 % % <因式> <因式递归>
因式递归 * * <因式> <因式递归>
因式递归 + $
因式递归 - $
因式递归 / / <因式> <因式递归>
因子 id <因式> <因式递归>
因子 ( <因式> <因式递归>
因子 number <因式> <因式递归>
因子 string <因式> <因式递归>
右值 id <表达式>
右值 ! <表达式>
右值 ( <表达式>
右值 number <表达式>
右值 string <表达式>
右值 { { <多个数据> }
字符串 string string
